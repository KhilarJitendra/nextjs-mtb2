/* stylelint-disable */
// vca mixins - generic
// .clearfix() {

//     &:before,
//     &:after {
//         content: '';
//         display: table;
//     }

//     &:after {
//         clear: both;
//     }
// }

.visually-hidden() {
    position: absolute;
    overflow: hidden;
    clip: rect(0 0 0 0);
    height: 1px;
    width: 1px;
    margin: -1px;
    padding: 0;
    border: 0;
}

// .reset-visually-hidden() {
//     position: static;
//     overflow: visible;
//     clip: auto;
//     height: auto;
//     width: auto;
//     margin: 0;
// }

.font-size(@sizeValue) {
    @remValue: ((@sizeValue / 100) * 62.5);
    @pxValue: (@sizeValue * 10);

    // font-size: ~'@{pxValue}px';
    font-size: ~'@{remValue}rem';
}

.font-size(@sizeValue, @lineHeight) {
    .font-size(@sizeValue);

    line-height: (@lineHeight / @sizeValue);
}

// .font-size-vw(@width, @px-at-width) {
//     .font-size(@px-at-width / 10);
//     @vwValue: @px-at-width / @width * 100;

//     font-size: ~'@{vwValue}vw';
// }

// specifies relative line-height if font sizeValue is known
// .line-height(@sizeValue, @lineHeight) {
//     line-height: (@lineHeight / @sizeValue);
// }

// fonts related
.font-antialiasing() {
    // This mixin is used for most fonts on the site, due to having light text on a dark background. We may want to stop using this mixin when we switch to dark text on a white background.
    //
    // "on Mac OS X, when ... you set light text on a dark background, you get a fairly ugly effect where the text becomes overly bold, spilling out of its lines. Switching away from subpixel rendering to antialiasing for light text on dark backgrounds makes it look lighter, countering the bolding effect"
    // http://usabilitypost.com/2012/11/05/stop-fixing-font-smoothing/
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

// .font-reset() {
//     font-style: normal;
//     font-weight: normal;
//     font-variant: normal;
//     text-transform: none;
// }

.text-size-adjust(@value) {
    -webkit-text-size-adjust: @value;
    -moz-text-size-adjust: @value;
    -ms-text-size-adjust: @value;
    -o-text-size-adjust: @value;
    text-size-adjust: @value;
}

// .perspective(@length) {
//     -webkit-perspective: @length;
//     -moz-perspective: @length;
//     perspective: @length;
// }

// .transform-style(@value) {
//     -webkit-transform-style: @value;
//     -moz-transform-style: @value;
//     transform-style: @value;
// }

// .backface-visibility(@value) {
//     -webkit-backface-visibility: @value;
//     -moz-backface-visibility: @value;
//     backface-visibility: @value;
// }

// .rotate(@deg) {
//     -webkit-transform: rotate(@deg);
//     -moz-transform: rotate(@deg);
//     -ms-transform: rotate(@deg);
//     -o-transform: rotate(@deg);
//     transform: rotate(@deg);
// }

.transition(@transition) {
    -webkit-transition: @transition;
    // -moz-transition: @transition;
    // -ms-transition: @transition;
    // -o-transition: @transition;
    transition: @transition;
}

// .transition-prefix(@transition) {
//     -webkit-transition: ~'-webkit-@{transition}';
//     -moz-transition: ~'-moz-@{transition}';
//     -ms-transition: ~'-ms-@{transition}';
//     -o-transition: ~'-o-@{transition}';
//     transition: @transition;
// }

.transition-multiple-props(...) {
    //http://stackoverflow.com/a/10413399/1582783
    // @props: ~`'@{arguments}'.replace(/[\[\]]/g, '')`; // ok

    @replaceWith: '';
    @regex1: ~'/[\[\]]/g';
    // @regex2: ~'/[\[\]]|\,\sX/g';

    // @props0: ~` '@{arguments}' .replace(/ [\[\]]/g, '') `;
    @props1: ~` '@{arguments}' .replace(@{regex1}, @{replaceWith}) `;
    // @props2: ~` '@{arguments}' .replace(@{regex2}, @{replaceWith}) `;
    -webkit-transition: @props1;
    // -moz-transition: @props1;
    // -o-transition: @props1;
    transition: @props1;
}

// .transition-property(...) {
//     @props: ~` '' .replace(/ [\[\]]/g, '') `;

//     -webkit-transition-property: @props;
//     -moz-transition-property: @props;
//     -ms-transition-property: @props;
//     -o-transition-property: @props;
//     transition-property: @props;
// }

// .transition-timing-function(@function) {
//     -webkit-transition-timing-function: @function;
//     -moz-transition-timing-function: @function;
//     -ms-transition-timing-function: @function;
//     -o-transition-timing-function: @function;
//     transition-timing-function: @function;
// }

// .transition-duration(@duration) {
//     -webkit-transition-duration: @duration;
//     -moz-transition-duration: @duration;
//     -ms-transition-duration: @duration;
//     -o-transition-duration: @duration;
//     transition-duration: @duration;
// }

// .transition-delay(@delay) {
//     -webkit-transition-delay: @delay;
//     -moz-transition-delay: @delay;
//     -ms-transition-delay: @delay;
//     -o-transition-delay: @delay;
//     transition-delay: @delay;
// }

// .transition-transform(@settings) {
//     -webkit-transition: -webkit-transform @settings;
//     -moz-transition: -moz-transform @settings;
//     -ms-transition: -ms-transform @settings;
//     -o-transition: -o-transform @settings;
//     transition: transform @settings;
// }

// .transition-filter(@settings) {
//     -webkit-transition: -webkit-filter @settings;
//     -moz-transition: -moz-filter @settings;
//     -ms-transition: -ms-filter @settings;
//     -o-transition: -o-filter @settings;
//     transition: filter @settings, -webkit-filter @settings, -moz-filter @settings, -ms-filter @settings, -o-filter @settings;
//     // comma separated list of transitions required here, as a singular
//     // prefixed transition will otherwise get overwritten, and break
//     // in browsers that don't yet support unprefixed transition: filter
//; }

.transform(@transform) {
    -webkit-transform: @transform;
    // -moz-transform: @transform;
    // -ms-transform: @transform;
    // -o-transform: @transform;
    transform: @transform;
}

// .transform-origin(@values) {
//     -webkit-transform-origin: @values;
//     -moz-transform-origin: @values;
//     -ms-transform-origin: @values;
//     -o-transform-origin: @values;
//     transform-origin: @values;
// }

.animation(@string) {
    // -webkit-animation: @string;
    // -moz-animation: @string;
    // -ms-animation: @string;
    // -o-animation: @string;
    animation: @string;
}

.border-radius(@amount) {
    // -webkit-border-radius: @amount;
    // -moz-border-radius: @amount;
    // -o-border-radius: @amount;
    border-radius: @amount;
}

.backdrop-filter(@prop, @value) {
    -webkit-backdrop-filter: ~'@{prop} (@{value})';
    backdrop-filter: ~'@{prop} (@{value})';
}

.appearance(@value) {
    -webkit-appearance: @value;
    // -moz-appearance: @value;
    // -o-appearance: @value;
    -ms-appearance: @value;
    appearance: @value;
}

.text-shadow(@string: 0 1px 3px rgba(0, 0, 0, 0.25)) {
    text-shadow: @string;
}

.box-shadow(@string) {
    // -webkit-box-shadow: @string;
    // -moz-box-shadow: @string;
    box-shadow: @string;
}

.box-sizing(@string) {
    // -webkit-box-sizing: @string;
    // -moz-box-sizing: @string;
    box-sizing: @string;
}

.user-select(@value) {
    // -webkit-user-select: @value;
    // -moz-user-select: @value;
    // -khtml-user-select: @value;
    // -ms-user-select: @value;
    user-select: @value;
}

// .inline-block() {
//     display: -moz-inline-stack;
//     display: inline-block;
//     vertical-align: top;
//     *vertical-align: auto;
//     zoom: 1;
//     *display: inline;
// }

// .blur(@value) {
//     filter: blur(@value);
//     -webkit-filter: blur(@value);
// }

//http://css-tricks.com/snippets/css/useful-css3-less-mixins/

.gradient(@startColor: #eee, @endColor: white) {
    background: @startColor;
    background: -webkit-gradient(
        linear,
        @direction-start top,
        @direction-start bottom,
        from(@startColor),
        to(@endColor)
    );
    background: -webkit-linear-gradient(top, @startColor, @endColor);
    // background: -moz-linear-gradient(top, @startColor, @endColor);
    background: -ms-linear-gradient(top, @startColor, @endColor);
    background: -o-linear-gradient(top, @startColor, @endColor);
    // background: linear-gradient(top, @startColor, @endColor);
}

.gradient-vertical(@startColor: #eee, @endColor: white) {
    .gradient(@startColor, @endColor);
}

// .gradient-horizontal(@startColor: #eee, @endColor: white) {
//     background-color: @startColor;
//     background-image: -webkit-gradient(
//         linear,
//         @direction-start top,
//         @direction-end top,
//         from(@startColor),
//         to(@endColor)
//     );
//     background-image: -webkit-linear-gradient(
//         @direction-start,
//         @startColor,
//         @endColor
//     );
//     background-image: -moz-linear-gradient(
//         @direction-start,
//         @startColor,
//         @endColor
//     );
//     background-image: -ms-linear-gradient(
//         @direction-start,
//         @startColor,
//         @endColor
//     );
//     background-image: -o-linear-gradient(
//         @direction-start,
//         @startColor,
//         @endColor
//     );
// }

// .gradient-vertical-with-image(@startColor: #eee, @endColor: white, @image-url, @image-properties) {
//     background: @startColor;
//     background: url(@image-url) @image-properties, -webkit-gradient(linear, @direction-start top, @direction-start bottom, from(@startColor), to(@endColor));
//     background: url(@image-url) @image-properties, -webkit-linear-gradient(top, @startColor, @endColor);
//     background: url(@image-url) @image-properties, -moz-linear-gradient(top, @startColor, @endColor);
//     background: url(@image-url) @image-properties, -ms-linear-gradient(top, @startColor, @endColor);
//     background: url(@image-url) @image-properties, -o-linear-gradient(top, @startColor, @endColor);
//     background: url(@image-url) @image-properties, linear-gradient(top, @startColor 0%, @endColor 100%);
// }

// .gradient-vertical-with-stop(@startColor: #eee, @endColor: white, @stop: 50%) {
//     background: @startColor;
//     background: -moz-linear-gradient(top, @startColor 0%, @endColor @stop);
//     background: -webkit-gradient(
//         linear,
//         @direction-start top,
//         @direction-start bottom,
//         color-stop(0%, @startColor),
//         color-stop(@stop, @endColor)
//     );
//     background: -webkit-linear-gradient(top, @startColor 0%, @endColor @stop);
//     background: -o-linear-gradient(top, @startColor 0%, @endColor @stop);
//     background: -ms-linear-gradient(top, @startColor 0%, @endColor @stop);
//     background: linear-gradient(to bottom, @startColor 0%, @endColor @stop);
// }

// .gradient-horizontal-with-stop(@startColor: #eee, @endColor: white, @stop: 50%) {
//     background: @startColor;
//     background: -moz-linear-gradient(
//         @direction-start,
//         @startColor 0%,
//         @endColor @stop
//     );
//     background: -webkit-gradient(
//         linear,
//         @direction-start top,
//         @direction-end top,
//         color-stop(0%, @startColor),
//         color-stop(@stop, @endColor)
//     );
//     background: -webkit-linear-gradient(
//         @direction-start,
//         @startColor 0%,
//         @endColor @stop
//     );
//     background: -o-linear-gradient(
//         @direction-start,
//         @startColor 0%,
//         @endColor @stop
//     );
//     background: -ms-linear-gradient(
//         @direction-start,
//         @startColor 0%,
//         @endColor @stop
//     );
//     background: linear-gradient(
//         to @direction-end,
//         @startColor 0%,
//         @endColor @stop
//     );
// }

// .gradient-angled( @dir: top, @start-color: #eee, @end-color: #aaa ) {
//     background: @start-color;
//     background: -webkit-linear-gradient(@dir, @start-color 0%, @end-color 100%);
//     background: -moz-linear-gradient(@dir, @start-color 0%, @end-color 100%);
//     background: -ms-linear-gradient(@dir, @start-color 0%, @end-color 100%);
//     background: -o-linear-gradient(@dir, @start-color 0%, @end-color 100%);
//     background: linear-gradient(@dir, @start-color 0%, @end-color 100%);
// }

// .gradient-dual(@gradient1, @gradient2) {
//     background-image: -webkit-linear-gradient(@gradient1), -webkit-linear-gradient(@gradient2);
//     background-image: -moz-linear-gradient(@gradient1), -moz-linear-gradient(@gradient2);
//     background-image: -ms-linear-gradient(@gradient1), -ms-linear-gradient(@gradient2);
//     background-image: -o-linear-gradient(@gradient1), -o-linear-gradient(@gradient2);
//     background-image: linear-gradient(@gradient1), linear-gradient(@gradient2);
// }

// https://gist.github.com/kellec/2364273
// .gradient-multi( ... ) {
//     background-image: -webkit-linear-gradient(@arguments);
//     background-image: -moz-linear-gradient(@arguments);
//     background-image: -ms-linear-gradient(@arguments);
//     background-image: -o-linear-gradient(@arguments);
//     background-image: linear-gradient(@arguments);
// }

// .border-image-gradient(@arguments, @direction: to bottom, @slice: 1, @repeat: 100% ) {
//     -webkit-border-image: -webkit-linear-gradient(@arguments) @slice @repeat;
//     -moz-border-image: -moz-linear-gradient(@arguments) @slice @repeat;
//     -o-border-image: -o-linear-gradient(@arguments) @slice @repeat;
//     border-image: linear-gradient(@direction, @arguments) @slice @repeat;
// }

// .gradient-radial(@gradient, @position) {
//     background: -webkit-radial-gradient(
//         @position,
//         ellipse cover,
//         @gradient
//     ); /* Chrome10+,Safari5.1+ */

//     background: -o-radial-gradient(
//         @position,
//         ellipse cover,
//         @gradient
//     ); /* Opera 12+ */

//     background: -ms-radial-gradient(
//         @position,
//         ellipse cover,
//         @gradient
//     ); /* IE10+ */

//     background: radial-gradient(ellipse at @position, @gradient); /* W3C */
// }

// Mask Gradient
// .mask-gradient(...) {
//     -webkit-mask-image: -webkit-linear-gradient(@arguments);
//     mask-image: linear-gradient(@arguments);
// }

// .column-count(@countValue) {
//     -webkit-column-count: @countValue;
//     -moz-column-count: @countValue;
//     column-count: @countValue;
// }

.column-gap(@gapValue) {
    -webkit-column-gap: @gapValue;
    -moz-column-gap: @gapValue;
    column-gap: @gapValue;
}

// .break-inside(@breakValue) {
//     -webkit-column-break-inside: @breakValue; /* Chrome, Safari, Opera */
//     page-break-inside: @breakValue; /* Firefox */
//     break-inside: @breakValue; /* IE 10+ */
// }

// .preserve-aspect-ratio(@percentValue) {

//     &:after {
//         height: 0;
//         padding-bottom: @percentValue;
//         display: block;
//         content: '';
//     }
// }

// .filter(@filter) {
//     -webkit-filter: @filter;
//     -moz-filter: @filter;
//     -ms-filter: @filter;
//     -o-filter: @filter;
//     filter: @filter;
// }

// .override-component-gutter(@componentName, @margin) {

//     .vca-main .vca-@{componentName} {
//         margin: @margin;
//     }
// }

// .selection-background(@background) {
//     //Required for FF 2.0 - latest

//     ::-moz-selection {
//         background: @background;
//     }

//     ::selection {
//         background: @background;
//     }
// }

/**
Mixin: .gutteredWidth

Apply width in % minus some px value.
    @param (number) pxVal The gutter for the element.
    @param (number) percVal The percentage value to subtract the gutter from.

IMPORTANT:
- The default is full width ie, 100%, SO DON'T NEED TO PASS 100 as second parameter !
- The units are optional !

Example 1: width: calc(100% - 20px); // here you don't need to pass 100 OR 100% !
    Use:
        .gutteredWidth(20);
        -OR-
        .gutteredWidth(20px);
        -OR-
        .gutteredWidth(@spacing20);

Example 2: width: calc(50% - 10px);
    Use:
        .gutteredWidth(10, 50);
        -OR-
        .gutteredWidth(10, 50%);
        -OR-
        .gutteredWidth(10px, 50);
        -OR-
        .gutteredWidth(10px, 50%);
*/

.gutteredWidth(@pxVal, @percVal: 100) {
    @perc: unit(@percVal, %);
    @px: unit(@pxVal, px);

    // @px1: ~` '@{pxVal}'.substring('@{pxVal}'.indexOf('px') + 1) `;
    // px1: @px1;
    // @px2: ~` '@{pxVal}'.replace(/px/g, '') `;
    // px2: @px2;
    // @px3: unit(@pxVal, px);
    // px3: @px3;
    width: ~'calc(@{perc} - @{px})';
}

/**
Mixin: .gutteredWidthPx

Apply width in px minus some px value
    @param (number) widthVal The pixel value to subtract the gutter from.
    @param (number) pxVal The gutter for the element.

Example :-  width: calc(400px - 60px);
    Use:
        .gutteredWidthPx(400px, @spacing60);
        -OR-
        .gutteredWidth(@spacing400, @spacing60);
        -OR-
        .gutteredWidthPx(400, @spacing60);
*/

.gutteredWidthPx(@widthVal, @pxVal) {
    @widthpx: unit(@widthVal, px);
    @px: unit(@pxVal, px);

    width: ~'calc(@{widthpx} - @{px})';
}

// rtl compliant translateX
.translateX(@val) {
    transform: translateX(@val * @direction-transform);
}

.translate(@x, @y:0) {
    -webkit-transform: translate(@x, @y);
    -moz-transform: translate(@x, @y);
    -ms-transform: translate(@x, @y);
    -o-transform: translate(@x, @y);
    transform: translate(@x, @y);
}

// .translate3d(@x, @y: 0, @z: 0) {
//     -webkit-transform: translate3d(@x, @y, @z);
//     -moz-transform: translate3d(@x, @y, @z);
//     -ms-transform: translate3d(@x, @y, @z);
//     -o-transform: translate3d(@x, @y, @z);
//     transform: translate3d(@x, @y, @z);
// }

.transition(@transition) {
    -webkit-transition: @transition;
    -moz-transition: @transition;
    -ms-transition: @transition;
    // -o-transition: @transition;
    transition: @transition;
}

// .placeholder-fix() {

//     &:focus::-webkit-input-placeholder,
//     &:focus::-moz-placeholder,
//     &:-moz-placeholder {
//         color: transparent;
//     }
// }

// .opacity(@opacity: 0.5) {
//     // -webkit-opacity: @opacity;
//     // -moz-opacity: @opacity;
//     opacity: @opacity;
// }

.vca-content-loading() {
    position: relative;
    background-color: @vca-grey-10;

    &::before {
        .keyframes(loading;{100% {.translateX(100%) ;}});
        .animation(loading 2s infinite);
        .translateX(-100%);

        background: linear-gradient(
            90deg,
            transparent,
            rgba(255, 255, 255, 0.5),
            transparent
        );
        display: block;
        content: '';
        position: absolute;
        width: 100%;
        height: 100%;
    }
}

.placeholder(@color: false) {

    &::-webkit-input-placeholder {
        color: @color;
    }

    &:-moz-placeholder {
        color: @color;
    }

    // &::-o-placeholder {
    //     color: @color;
    // }

    &:-ms-input-placeholder {
        color: @color;
    }

    &::placeholder {
        color: @color;
    }
}

.placeholder-opacity(@opacity: 1) {

    &::-webkit-input-placeholder {
        opacity: @opacity;
    }

    &:-moz-placeholder {
        opacity: @opacity;
    }

    &:-ms-input-placeholder {
        opacity: @opacity;
    }

    &::placeholder {
        opacity: @opacity;
    }
}

// .wrap() {
//     text-wrap: wrap;
//     white-space: -moz-pre-wrap;
//     white-space: pre-wrap;
//     word-wrap: break-word;
// }

.position-sticky() {
    position: -webkit-sticky;
    position: sticky;
}

// Loop for spacer mixin, in the multiple of 5
.generateSpacer(@counter) when (@counter > 0) {
    @spacer: @counter - 5;
    // generate classes for margin top, name look like - .vca-mt-10

    .vca-mt-@{spacer} {
        margin-top: ~'@{spacer}px';
    }
    // generate classes for margin bottom, name look like - .vca-mb-10

    .vca-mb-@{spacer} {
        margin-bottom: ~'@{spacer}px';
    }
    .generateSpacer(@spacer);
}

.getImageOverlay() {

    picture {
        position: relative;
        display: block;

        &:before {
            content: '';
            .transition(opacity 500ms cubic-bezier(0.19, 1, 0.22, 1) 0s);

            display: block;
            height: 100%;
            width: 100%;
            position: absolute;
            z-index: 2;
            background: @vca-black;
            opacity: 0;
        }
    }
}

.getImageOverlayEffect() {

    picture {

        &:before {
            opacity: 0.1;
        }
    }
}

.cursor(@prop) {
    cursor: move; /* fallback if grab cursor is unsupported */
    cursor: ~'-webkit-@{prop}';
    cursor: ~'-moz-@{prop}';
    cursor: @prop;
}

.resetBtnInteraction() {
    border: 0;
    outline: 0;

    &:hover,
    &:focus {
        border: 0;
        outline: 0;
        outline-color: transparent;
    }
}

.resetImageInteraction() {

    picture {

        &:before {
            content: none;
        }
    }
}

.no-underline() {
    text-decoration: none;
}

.underline() {
    // // 0 - Default
    text-decoration: underline;
    text-underline-position: under;
    -ms-text-underline-position: below;

    // // 1 - using after
    // position: relative;

    // &::after {
    //     content: '';
    //     width: 100%;
    //     border-bottom: 1px solid;
    //     position: absolute;
    //     left: 0;
    //     bottom: 0;
    // }

    // // 2 - using box-shadow
    // .box-shadow(0 1px 0 0);

    // // 3 - using border botton
    // border-bottom: 2px solid;

    // // 4 - text-shadow & box-shadow - OK
    // // text-shadow: -2px -2px white, -2px 2px white, 2px -2px white, 2px 2px white;
    // background-size: 1px 1em;
    // box-shadow: inset 0 -0.175em white, inset 0 -0.2em;
    // display: inline;
    // padding-bottom: 5px;

    // // 5 - linear-gradient
    // position: relative;

    // &::after {
    //     content: '';
    //     position: absolute;
    //     left: 0;
    //     bottom: 0;
    //     width: 100%;
    //     height: 2px;
    //     background-image: linear-gradient(transparent 0, #000 100%);
    // }

    // // 6 - linear-gradient
    // display: inline;
    // background-image: linear-gradient(transparent, transparent), linear-gradient(transparent, transparent), linear-gradient(to right, #30e8bf, #ff8235);
    // background-repeat: no-repeat;
    // background-position: 120%, 122%, 0 130%;
    // background-size: 100% 10px;

    // // 7 -
    // background-size: 100% 2px;
    // text-shadow: 0 2.5px 4px rgba(0, 0, 0, 0.5);
}
